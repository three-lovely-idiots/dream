<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/4/10 0010
 * Time: 上午 10:55
 */

namespace app\index\controller;


use app\common\enum\StatusEnum;
use app\common\model\UserCollect;
use app\common\service\Util;
use app\common\validate\CollectValidate;
use app\common\service\Token;
use app\common\service\CollectService;
use think\Cache;

class Mycollect extends Base
{
    private $redis_handler;
    private $uid;
    private $redis_key; //用户对图片
    private $redis_key2; //图片对应用户
    public function _initialize()
    {
        parent::_initialize();// TODO: Change the autogenerated stub
    }
    protected $beforeActionList = [
        'setCollectUserToRedis' => ['only'=>'collectlike,cancelcollect'],
        'setAllCollectToRedis' => ['only'=>'getusercollect']
    ];

    //取出当年图片方法 getcurrentimage的前置操作方法
    public function setCollectUserToRedis(){
        (new CollectValidate())->goCheck();
        $tid = request()->param('tid');
        $type = request()->param('type');
        $this->uid = Token::getCurrentUidByToken();
        CollectService::setCollectToRedis($this->uid,$type);
        CollectService::setCollectToRedisTwo($tid,$type);
        //获取redis句柄以及相关的rediskey
        $this->redis_handler = Cache::store('redis')->handler();
        $this->redis_key = 'collect:'.$this->uid.':'.$type;
        $this->redis_key2 = 'collect_user:'.$tid.':'.$type;
    }

    public function setAllCollectToRedis(){
        $type = request()->param('type');
        $this->uid = Token::getCurrentUidByToken();
        CollectService::setCollectToRedis($this->uid,$type);
        //获取redis句柄以及相关的rediskey
        $this->redis_handler = Cache::store('redis')->handler();
        $this->redis_key = 'collect:'.$this->uid.':'.$type;
    }

    //收藏
    public function collectLike($type='',$id='',$title='',$pic='')
    {
        //在前面要加上手机号检测
        ////检测输入是否正确  放在前置方法里面

        if(request()->isPost()){ // 如果是post提交
            //检测重复 我想了一下 直接用redis来判断吧key collect:uid:product
            $data = $this->redis_handler->sismember($this->redis_key,$id);
           if($data){
               return Util::showMsg(StatusEnum::COLLECT_ALREADY,'已经收藏过啦');
           }

            $params = [  //拼接一下数据
                'tid' => $id,
                'uid' => $this->uid,
                'title'=>$title,
                'pic'=>$pic,
                'type'=>($type == 'product') ? StatusEnum::PRODUCT_TYPE : StatusEnum::IMAGE_TYPE,
                'create_time' => strtotime('now')
            ];
           $res = UserCollect::create($params);
           //对添加收藏的商品/图片做添加数自增
            CollectService::setItemCollectIncr($type,$id);

           if($res->id){ //如果有id存在 那就证明是成功的
               //下面可以单独拿出去放到service里面
               //每次存入新的 都要把redis里面存入一份呢 user=》item
               $this->redis_handler->sadd($this->redis_key,$id);
               //每次存入新的 都要把redis里面存入一份呢 item=》user
               CollectService::addUserIntoItem($this->redis_key2,$this->uid);
               return Util::showMsg(StatusEnum::SUCCESS,'收藏成功');
           }

            return Util::showMsg(StatusEnum::FAIL,'收藏失败');
        }
    }

    //取消收藏

    /**
     * @param $type  类型 善品图片
     * @param $id    usercollect表 主键id
     * @param $tid   对应类型的id  img_id 或者 product_id
     * @return array
     * @throws \app\common\exception\TokenException
     * @throws \think\exception\PDOException
     */
     public function cancelCollect($type,$id,$tid)
     {
         //凡是涉及多表操作都要用事务操作

         $uid = Token::getCurrentUidByToken();
         //收藏与取消收藏的动作其实可以放在消息队列的逻辑里执行 这个参考我的笔记thinkqueue
         //https://blog.csdn.net/idkuangxiao/article/details/82765107
         //1 删除数据库usercollect记录 对应item的collect数目减1
           $res = UserCollect::cancelUserCollect($type,$id,$uid,$tid);

           if(!$res){ //说明操作不成功
               return Util::showMsg(StatusEnum::FAIL,'取消收藏失败');
           }
         //2 user=》item 当前user 对应type的item集合删除对应的数据
         // item=》user  当前item对用user哈希表删除对应的user
         CollectService::cancelRedisCollect($type,$id,$tid,$uid);
         return Util::showMsg(StatusEnum::SUCCESS,'取消收藏成功');
     }

     public function getUserCollect($type,$length,$pageNO)
     {
         if(request()->isPost()){
             $is_last = 0;// 用来判断是不是最后一页
             //下面取出分页数据
             $res = UserCollect::getUserCollect($type,$length,$pageNO,$this->uid);
            //取出总共的count这里我们用redis去取
             $count = $this->redis_handler->scard($this->redis_key);

             if(!$res || !$count){
                 return Util::showMsg(StatusEnum::FAIL,'获取数据失败');
             }
             if(count($res) < $length || $pageNO*$length == $count){ //取出的数据个数是否小于每页的length 小于的话说明是最后一页 或者页数乘以每页长度刚好等于总数量
                 $is_last = 1;
             }
             return Util::showMsg(StatusEnum::SUCCESS,['data'=>$res,'msg'=>'获取成功','is_last'=>$is_last]);
         }

     }

}